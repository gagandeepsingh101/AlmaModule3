// useMemo

import { useState, useMemo } from 'react';
export function FactorialCalculator() {
  const [number, setNumber] = useState(1);
  const [inc, setInc] = useState(0);
  const factorial = factorialOf(number);
  const onChange = event => {
    setNumber(Number(event.target.value));
  };
  const onClick = () => setInc(i => i + 1);
  
  return (
    <div>
      Factorial of 
      <input type="number" value={number} onChange={onChange} />
      is {factorial}
      <button onClick={onClick}>Re-render</button>
    </div>
  );
}
function factorialOf(n) {
  console.log('factorialOf(n) called!');
  return n <= 0 ? 1 : n * factorialOf(n - 1);
}

export default FactorialCalculator;


//useCallback

import React, { useState, useCallback } from 'react';

function Child({ onButtonClick }) {
  console.log('Child rendered');
  return (
    <button onClick={onButtonClick}>Child button Click me</button>
  );
}

function Parent() {
  const [count, setCount] = useState(0);

  const incrementCount = useCallback(() => {
    setCount(c => c + 1);
  }, []); // Dependency array

  return (
    <div>
       Parent calling Child Component
      <Child onButtonClick={incrementCount} />
      <p>Count: {count}</p>
    </div>
  );
}
// export parent and child
export default Parent;
export { Child };


